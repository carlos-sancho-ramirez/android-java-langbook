apply plugin: 'com.android.application'
apply plugin: 'de.mannodermaus.android-junit5'

String readCommitHash() {
    def suffix = ''

    def gitExists = exec {
        commandLine 'which', 'git'
        ignoreExitValue true
    }

    if (gitExists.getExitValue() == 0) {
        def so = new ByteArrayOutputStream()
        def gitRevParseResult = exec {
            executable 'git'
            args 'rev-parse', '--short', 'HEAD'
            ignoreExitValue true
            standardOutput = so
        }

        if (gitRevParseResult.exitValue == 0) {
            suffix = '-' + so.toString().trim()
        }
    }

    return suffix
}

android {
    namespace 'sword.langbook3.android'

    defaultConfig {
        applicationId "sword.langbook3.android"
        minSdkVersion 17
        targetSdkVersion 34
        compileSdk 34
        versionCode 1
        versionName "3.1.0" + readCommitHash()
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions = [ "ui" ]

    productFlavors {
        /*
         * Flavor prioritizing memory efficiency and speed over beautiful UI.
         * Valuable for older devices or devices with poor performance.
         */
        lean {
            dimension "ui"
            versionNameSuffix "-L"
            applicationId "sword.langbook3.android.lean"
        }

        /**
         * Flavor prioritizing beautiful UI, even if that makes the app slower or heavier.
         * Valuable for high range devices with good processors.
         */
        fancy {
            dimension "ui"
            versionNameSuffix "-F"
            applicationId "sword.langbook3.android.fancy"
            multiDexEnabled true
        }
    }

    signingConfigs {
        release {
            // It is expected to find keystore.jks and keystore.properties
            // in the project root in order to generate the signed APK for release
            // They are explicitly excluded from the repository for security reasons.
            storeFile rootProject.file('keystore.jks')

            def keystorePropertiesFile = rootProject.file("keystore.properties")
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':collectionExtensions')
    implementation project(':databaseExtensions')
    implementation project(':dbManager')
    implementation project(':dbSerializer')
    implementation project(':dbSchema')
    implementation "com.github.carlos-sancho-ramirez:lib-java-database:$DATABASE_VERSION"
    implementation "com.github.carlos-sancho-ramirez:lib-java-collections:$COLLECTIONS_VERSION"
    implementation 'androidx.annotation:annotation:1.3.0'
    fancyImplementation "androidx.multidex:multidex:2.0.1"
}
